<?xml version="1.0" encoding="ISO-8859-1"?>

<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:util="http://www.springframework.org/schema/util"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    
    <context:component-scan base-package="org.generationcp.ibpworkbench.rest" />
    
    <context:annotation-config />
    
    <context:load-time-weaver />

    <bean id="cloner" class="com.rits.cloning.Cloner"/>

    <bean id="breedingViewService" class="org.generationcp.ibpworkbench.service.BreedingViewServiceImpl" scope="request">
    	<aop:scoped-proxy/>
    </bean>

	<bean id="workbenchDataManager"
		class="org.generationcp.middleware.manager.WorkbenchDataManagerImpl"
		destroy-method="close">
		<constructor-arg ref="workbenchHibernateSessionProvider" />
	</bean>
    
    <bean id="studyDataManager" 
    	factory-bean="managerFactory"
    	factory-method="getNewStudyDataManager" 
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="ontologyDataManager" 
    	factory-bean="managerFactory"
    	factory-method="getNewOntologyDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="importService" class="org.generationcp.commons.service.impl.BreedingViewImportServiceImpl"/>
    
    <bean id="springAppContextProvider" class="org.generationcp.commons.util.SpringAppContextProvider"></bean>

	<!-- Data Source and Transaction Configuration -->

	<tx:annotation-driven />

	<bean id="xaDataSources" class="org.generationcp.middleware.hibernate.XADataSources" />

	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="false" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.J2eeUserTransaction">
		<property name="transactionTimeout" value="300" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="atomikosTransactionManager,atomikosUserTransaction">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>


	<bean id="workbenchHibernateSessionProvider"
		class="org.generationcp.middleware.hibernate.HibernateSessionPerRequestProvider">
		<property name="sessionFactory" ref="WORKBENCH_SessionFactory" />
	</bean>


	<!-- Manager Factory Provider -->
	<bean id="managerFactoryProvider"
		class="org.generationcp.commons.hibernate.DynamicManagerFactoryProviderConcurrency">
		<constructor-arg ref="workbenchDataManager" />
	</bean>

	<bean id="managerFactory" name="managerFactory" factory-bean="managerFactoryProvider"
		factory-method="createInstance" scope="request">
		<aop:scoped-proxy />
	</bean>  
	
	<bean id="ontologyVariableDataManager" factory-bean="managerFactory"
		factory-method="getOntologyVariableDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="propertyDataManager" factory-bean="managerFactory"
		factory-method="getOntologyPropertyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="scaleDataManager" factory-bean="managerFactory"
		factory-method="getOntologyScaleDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="methodDataManager" factory-bean="managerFactory"
		factory-method="getOntologyMethodDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="ontologyDaoFactory" factory-bean="managerFactory"
		factory-method="getOntologyDaoFactory" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="standardVariableTransformer" factory-bean="managerFactory"
		factory-method="getStandardVariableTransformer" scope="request">
		<aop:scoped-proxy />
	</bean>  
</beans>